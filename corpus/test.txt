================================================================================
Empty module
================================================================================

module my-module-name {
}

--------------------------------------------------------------------------------

(yang
  (module
    module_name: (identifier)
    module_block: (block)))

================================================================================
YANG version
================================================================================

module my-module-name {
    yang-version 1.1;
}

--------------------------------------------------------------------------------

(yang
  (module
    module_name: (identifier)
    module_block: (block
      (statement
        (statement_keyword)
        (argument
          (yang_version))))))

================================================================================
Submodule with yang-version
================================================================================

submodule my-module-name {
    yang-version 1.1;
}

--------------------------------------------------------------------------------

(yang
  (submodule
    submodule_name: (identifier)
    submodule_block: (block
      (statement
        (statement_keyword)
        (argument
          (yang_version))))))

================================================================================
Extension statements
================================================================================

module my-module-name {
    container foo {
        my-extension:foo "called with an argument";

        custom-extensions:can-be-used-without-argument;

        tailf:action foobar {
            // With a block
        }
    }
}

--------------------------------------------------------------------------------

(yang
  (module
    (identifier)
    (block
      (statement
        (statement_keyword)
        (argument
          (node_identifier))
        (block
          (extension_statement
            (extension_keyword)
            (argument
              (string)))
          (extension_statement
            (extension_keyword))
          (extension_statement
            (extension_keyword)
            (argument
              (node_identifier))
            (block
              (comment))))))))

================================================================================
Numbers
================================================================================

module my-module-name {
    container regular {
        leaf positive {
           type uint32;
           default 100;
        }

        leaf zero {
           type uint32;
           default 0;
        }

        leaf negative {
           type uint32;
           default -5;
        }
    }

    container hex {
        leaf positive {
           type uint32;
           default 0xff;
        }

        leaf zero {
           type uint32;
           default 0x0;
        }

        leaf negative {
           type uint32;
           default -0XFF0123456;
        }
    }
}

--------------------------------------------------------------------------------

(yang
  (module
    (identifier)
    (block
      (statement
        (statement_keyword)
        (argument
          (node_identifier))
        (block
          (statement
            (statement_keyword)
            (argument
              (node_identifier))
            (block
              (statement
                (statement_keyword)
                (argument
                  (built_in_type)))
              (statement
                (statement_keyword)
                (argument
                  (integer)))))
          (statement
            (statement_keyword)
            (argument
              (node_identifier))
            (block
              (statement
                (statement_keyword)
                (argument
                  (built_in_type)))
              (statement
                (statement_keyword)
                (argument
                  (integer)))))
          (statement
            (statement_keyword)
            (argument
              (node_identifier))
            (block
              (statement
                (statement_keyword)
                (argument
                  (built_in_type)))
              (statement
                (statement_keyword)
                (argument
                  (integer)))))))
      (statement
        (statement_keyword)
        (argument
          (node_identifier))
        (block
          (statement
            (statement_keyword)
            (argument
              (node_identifier))
            (block
              (statement
                (statement_keyword)
                (argument
                  (built_in_type)))
              (statement
                (statement_keyword)
                (argument
                  (integer)))))
          (statement
            (statement_keyword)
            (argument
              (node_identifier))
            (block
              (statement
                (statement_keyword)
                (argument
                  (built_in_type)))
              (statement
                (statement_keyword)
                (argument
                  (integer)))))
          (statement
            (statement_keyword)
            (argument
              (node_identifier))
            (block
              (statement
                (statement_keyword)
                (argument
                  (built_in_type)))
              (statement
                (statement_keyword)
                (argument
                  (integer))))))))))

================================================================================
Enumerations
================================================================================

module my-module-name {
    typedef foo {
        // Apparently enums can have a glob value, even though it's not
        // mentioned in the RFC or the ABNF spec.
        type enumeration {
            enum *;
        }
    }
}

--------------------------------------------------------------------------------

(yang
  (module
    module_name: (identifier)
    module_block: (block
      (statement
        (statement_keyword)
        (argument
          (node_identifier))
        (block
          (comment)
          (comment)
          (statement
            (statement_keyword)
            (argument
              (built_in_type))
            (block
              (statement
                (statement_keyword)
                (argument
                  (glob))))))))))

================================================================================
Range values
================================================================================

module my-module-name {
    typedef foo {
        type string {
            length "3..64";
        }
    }

    typedef bar {
        type uint32 {
            range 0..100;
        }
    }
}

--------------------------------------------------------------------------------

(yang
  (module
    (identifier)
    (block
      (statement
        (statement_keyword)
        (argument
          (node_identifier))
        (block
          (statement
            (statement_keyword)
            (argument
              (built_in_type))
            (block
              (statement
                (statement_keyword)
                (argument
                  (range
                    (quoted_range))))))))
      (statement
        (statement_keyword)
        (argument
          (node_identifier))
        (block
          (statement
            (statement_keyword)
            (argument
              (built_in_type))
            (block
              (statement
                (statement_keyword)
                (argument
                  (range
                    (unquoted_range)))))))))))

================================================================================
Module with augment statement
================================================================================

module my-module-name {
    yang-version 1.1;
    namespace "https://foo.bar.com/my-module-name";
    prefix mymod;

    augment /ncs:devices/device {
        container foo {
            leaf bar {
                type string;
                description "Foo bar.";
            }
        }
    }
}

--------------------------------------------------------------------------------

(yang
  (module
    module_name: (identifier)
    module_block: (block
      (statement
        (statement_keyword)
        (argument
          (yang_version)))
      (statement
        (statement_keyword)
        (argument
          (string)))
      (statement
        (statement_keyword)
        (argument
          (node_identifier)))
      (statement
        (statement_keyword)
        (argument
          (keypath))
        (block
          (statement
            (statement_keyword)
            (argument
              (node_identifier))
            (block
              (statement
                (statement_keyword)
                (argument
                  (node_identifier))
                (block
                  (statement
                    (statement_keyword)
                    (argument
                      (built_in_type)))
                  (statement
                    (statement_keyword)
                    (argument
                      (string))))))))))))

================================================================================
All permutations of string usage
================================================================================

module my-string-testing-module {
    namespace "https://foo.bar.com/my-string-testing-module";
    prefix string-test;

    container lets-test-some-strings {
        description "Regular, boring, double quoted string";
        description 'Single tick stings!';

        description "Can contain \"escaped\" double quotes";
        description 'Can contain \'escaped\' single quotes';

        description "Multi-line, multi paragraph string.

                     More here,

                     Even more here.";

        description 'Multi-line, multi paragraph string.

                     More here,

                     Even more here.';

        description
          "Multi-line, multi paragraph string, starting on the next line.

           More here,

           Even more here.";

        description
          'Multi-line, multi paragraph string.

           More here,

           Even more here.';

        description "String split "
                  + "over multiple lines "
                  + "is also normal. "
                  + 'Mixed tick strings is not really normal, but '
                  + "is none the less syntactically valid.";
    }

    container unquoted-string-madness {
        // YANG accepts almost (?) any string as arguments WITHOUT QUOTES, which
        // is massively annoying
        leaf some-time {
            type time-interval;
            default 00:00:15.0;
        }

        leaf some-thing {
            type thing;
            default 1.2.3.4;
        }
    }
}

--------------------------------------------------------------------------------

(yang
  (module
    module_name: (identifier)
    module_block: (block
      (statement
        (statement_keyword)
        (argument
          (string)))
      (statement
        (statement_keyword)
        (argument
          (node_identifier)))
      (statement
        (statement_keyword)
        (argument
          (node_identifier))
        (block
          (statement
            (statement_keyword)
            (argument
              (string)))
          (statement
            (statement_keyword)
            (argument
              (string)))
          (statement
            (statement_keyword)
            (argument
              (string)))
          (statement
            (statement_keyword)
            (argument
              (string)))
          (statement
            (statement_keyword)
            (argument
              (string)))
          (statement
            (statement_keyword)
            (argument
              (string)))
          (statement
            (statement_keyword)
            (argument
              (string)))
          (statement
            (statement_keyword)
            (argument
              (string)))
          (statement
            (statement_keyword)
            (argument
              (string_concatenation
                (string)
                (plus_symbol)
                (string)
                (plus_symbol)
                (string)
                (plus_symbol)
                (string)
                (plus_symbol)
                (string))))))
      (statement
        (statement_keyword)
        (argument
          (node_identifier))
        (block
          (comment)
          (comment)
          (statement
            (statement_keyword)
            (argument
              (node_identifier))
            (block
              (statement
                (statement_keyword)
                (argument
                  (node_identifier)))
              (statement
                (statement_keyword)
                (argument
                  (unquoted_string)))))
          (statement
            (statement_keyword)
            (argument
              (node_identifier))
            (block
              (statement
                (statement_keyword)
                (argument
                  (node_identifier)))
              (statement
                (statement_keyword)
                (argument
                  (unquoted_string))))))))))

================================================================================
Lots of diverse grammar used together
================================================================================

module my-module-name {
    yang-version 1.1;
    namespace "https://foo.bar.com/my-module-name";
    prefix mymod;

    // Comment!
    import ietf-inet-types {
        prefix inet;
    }

    organization "Foo";
    contact "Foo post <post@foo.com>";

    description
        "I am a very long, multi-line string.

         This is entirely valid syntax and is a very common way to provide
         string arguments to description statements.

         It doesn't matter how long it is or how many paragraphs it contains,
         and it should even be able to contain escaped quotes like \"this\".

         It usually ends like this.";

    revision 2019-11-16 {
        description
            "This description starts on the next line!";
        reference
            "So does this reference statement!";
    }

    identity my-identity {
        description "This is a YANG identity.";
        reference "Foobar!";
    }

    augment /ncs:devices/device {
        container new-container {
            tailf:action add-device {
                tailf:actionpoint my-module-name-add-device;
                tailf:info // A comment between a keyword and its argument!
                    "Add a device!";
                input {
                    uses inventory-actions:device-input;
                }
                output {
                    leaf result {
                        type string;
                        description "Action result.";
                    }
                }
                /* This entire block is commented out and should only produce a
                   comment node in the syntax tree
                output {
                    leaf result {
                        type string;
                        description "Action result.";
                    }
                }
                */
            }
        }
    }

    container various-strings {
        must "boolean(/foo/bar) = false "
           + "&& boolean(/bar/baz) = false" {
            error-message 'Oh no!';
        }
    }
}

--------------------------------------------------------------------------------

(yang
  (module
    (identifier)
    (block
      (statement
        (statement_keyword)
        (argument
          (yang_version)))
      (statement
        (statement_keyword)
        (argument
          (string)))
      (statement
        (statement_keyword)
        (argument
          (node_identifier)))
      (comment)
      (statement
        (statement_keyword)
        (argument
          (node_identifier))
        (block
          (statement
            (statement_keyword)
            (argument
              (node_identifier)))))
      (statement
        (statement_keyword)
        (argument
          (string)))
      (statement
        (statement_keyword)
        (argument
          (string)))
      (statement
        (statement_keyword)
        (argument
          (string)))
      (statement
        (statement_keyword)
        (argument
          (date))
        (block
          (statement
            (statement_keyword)
            (argument
              (string)))
          (statement
            (statement_keyword)
            (argument
              (string)))))
      (statement
        (statement_keyword)
        (argument
          (node_identifier))
        (block
          (statement
            (statement_keyword)
            (argument
              (string)))
          (statement
            (statement_keyword)
            (argument
              (string)))))
      (statement
        (statement_keyword)
        (argument
          (keypath))
        (block
          (statement
            (statement_keyword)
            (argument
              (node_identifier))
            (block
              (extension_statement
                (extension_keyword)
                (argument
                  (node_identifier))
                (block
                  (extension_statement
                    (extension_keyword)
                    (argument
                      (node_identifier)))
                  (extension_statement
                    (extension_keyword)
                    (comment)
                    (argument
                      (string)))
                  (statement
                    (statement_keyword)
                    (block
                      (statement
                        (statement_keyword)
                        (argument
                          (node_identifier)))))
                  (statement
                    (statement_keyword)
                    (block
                      (statement
                        (statement_keyword)
                        (argument
                          (node_identifier))
                        (block
                          (statement
                            (statement_keyword)
                            (argument
                              (built_in_type)))
                          (statement
                            (statement_keyword)
                            (argument
                              (string)))))))
                  (comment)))))))
      (statement
        (statement_keyword)
        (argument
          (node_identifier))
        (block
          (statement
            (statement_keyword)
            (argument
              (string_concatenation
                (string)
                (plus_symbol)
                (string)))
            (block
              (statement
                (statement_keyword)
                (argument
                  (string))))))))))
